import { ProduitChargeExploitationModule } from './produit_charge_exploitation.module';
import { Injectable, NotFoundException } from '@nestjs/common';
import { PrismaService } from 'src/prisma/prisma.service';
import {
  CreateProduitChargeExploitationDto,
  UpdateProduitChargeExploitationDto,
} from './dto/produitChargeExploitation.dto';

@Injectable()
export class ProduitChargeExploitationService {
  constructor(private readonly prismaService: PrismaService) {}

  async getAll() {
    return this.prismaService.produitChargeExploitation.findMany({
      select: {
        id: true,
        produit: {
          include: {},
        },
        chargeExploitation: {
          include: {},
        },
      },
    });
  }

  async getOne(produitChargeExploitationId: number) {
    const produitChargeExploitation =
      await this.prismaService.produitChargeExploitation.findUnique({
        where: { id: produitChargeExploitationId },
      });
    if (!produitChargeExploitation)
      throw new NotFoundException('Post not found');
    return produitChargeExploitation;
  }
  async create(
    createProduitChargeExploitationDto: CreateProduitChargeExploitationDto,
  ) {
    const { produitId, chargeExploitationId } =
      createProduitChargeExploitationDto;
    await this.prismaService.produitChargeExploitation.create({
      data: { produitId, chargeExploitationId },
    });
    return { data: 'ProduitChargeExploitation created' };
  }

  async update(
    produitChargeExploitationId: number,
    updateProduitChargeExploitationDto: UpdateProduitChargeExploitationDto,
  ) {
    const produitChargeExploitation =
      await this.prismaService.produitChargeExploitation.findUnique({
        where: { id: produitChargeExploitationId },
      });
    if (!produitChargeExploitation)
      throw new NotFoundException('ProduitChargeExploitation not found');
    await this.prismaService.produitChargeExploitation.update({
      where: { id: produitChargeExploitationId },
      data: { ...updateProduitChargeExploitationDto },
    });
    return { data: 'ProduitChargeExploitation updeted!' };
  }

  async delete(produitChargeExploitationId: number) {
    const produitChargeExploitation =
      await this.prismaService.produitChargeExploitation.findUnique({
        where: { id: produitChargeExploitationId },
      });
    if (!produitChargeExploitation)
      throw new NotFoundException('Post not found');
    await this.prismaService.produitChargeExploitation.delete({
      where: { id: produitChargeExploitationId },
    });
    return { data: 'ProduitChargeExploitation deleted' };
  }
}
