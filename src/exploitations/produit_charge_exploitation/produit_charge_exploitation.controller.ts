import {
  Body,
  Controller,
  Delete,
  Get,
  Param,
  ParseIntPipe,
  Post,
  Put,
  Req,
} from '@nestjs/common';
import { UseGuards } from '@nestjs/common/decorators/core/use-guards.decorator';

import { AuthGuard } from '@nestjs/passport';

import { Request } from 'express';
import { ApiBearerAuth, ApiTags } from '@nestjs/swagger';
import { ProduitChargeExploitationService } from './produit_charge_exploitation.service';
import {
  CreateProduitChargeExploitationDto,
  UpdateProduitChargeExploitationDto,
} from './dto/produitChargeExploitation.dto';

@ApiTags('ProduitChargeExploitation')
@Controller('produitChargeExploitations')
export class ProduitChargeExploitationController {
  constructor(
    private readonly produitChargeExploitationService: ProduitChargeExploitationService,
  ) {}

  @ApiBearerAuth()
  @UseGuards(AuthGuard('jwt'))
  @Get()
  findAll() {
    return this.produitChargeExploitationService.getAll();
  }

  @Get('/:id')
  get(
    @Param('id', ParseIntPipe) produitChargeExploitationId: number,
    createProduitChargeExploitationDto: CreateProduitChargeExploitationDto,
  ) {
    return this.produitChargeExploitationService.getOne(
      produitChargeExploitationId,
    );
  }



  @ApiBearerAuth()
  @UseGuards(AuthGuard('jwt'))
  @Post('create')
  create(
    @Body()
    createProduitChargeExploitationDto: CreateProduitChargeExploitationDto,
  ) {
    return this.produitChargeExploitationService.create(
      createProduitChargeExploitationDto,
    );
  }

  @ApiBearerAuth()
  @UseGuards(AuthGuard('jwt'))
  @Delete('delete/:id')
  delete(
    @Param('id', ParseIntPipe) produitChargeExploitationId: number,
    createProduitChargeExploitationDto: CreateProduitChargeExploitationDto,
    @Req() request: Request,
  ) {
    return this.produitChargeExploitationService.delete(
      produitChargeExploitationId,
    );
  }

  @ApiBearerAuth()
  @UseGuards(AuthGuard('jwt'))
  @Put('update/:id')
  update(
    @Param('id', ParseIntPipe) produitChargeExploitationId: number,
    @Body()
    updateProduitChargeExploitationDto: UpdateProduitChargeExploitationDto,
  ) {
    return this.produitChargeExploitationService.update(
      produitChargeExploitationId,
      updateProduitChargeExploitationDto,
    );
  }
}
