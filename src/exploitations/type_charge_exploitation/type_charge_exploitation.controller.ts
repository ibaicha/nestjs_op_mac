import { Body, Controller, Delete, Get, Param, ParseIntPipe, Post, Put, Req} from '@nestjs/common';
import { UseGuards } from '@nestjs/common/decorators/core/use-guards.decorator';
import { TypeChargeExploitationService } from  './type_charge_exploitation.service';
import { AuthGuard } from '@nestjs/passport';
import { CreateTypeChargeExploitationDto } from './dto/createTypeChargeExploitation.dto';
import { UpdateTypeChargeExploitationDto } from './dto/updateTypeChargeExploitation.dto';
import { Request } from 'express';
import { ApiBearerAuth, ApiTags } from '@nestjs/swagger';


@ApiTags('TypeChargeExploitation')
@Controller('typeChargeExploitations')
export class TypeChargeExploitationController {
    constructor(private readonly typeChargeExploitationService: TypeChargeExploitationService) {}

    @Get()
    getAll() {
        return this.typeChargeExploitationService.getAll();
    }

    @Get("/:id")
    get(@Param("id", ParseIntPipe) typeChargeExploitationId : number, createTypeChargeExploitationDto: CreateTypeChargeExploitationDto) {
        return this.typeChargeExploitationService.getOne(typeChargeExploitationId); 
    }
   

    @ApiBearerAuth()
    @UseGuards(AuthGuard('jwt'))
    @Post("create")
    create(@Body() createTypeChargeExploitationDto: CreateTypeChargeExploitationDto) {
        return this.typeChargeExploitationService.create(createTypeChargeExploitationDto);
        
    }


    @ApiBearerAuth()
    @UseGuards(AuthGuard('jwt'))
    @Delete("delete/:id")
    delete(@Param("id", ParseIntPipe) typeChargeExploitationId : number, createTypeChargeExploitationDto: CreateTypeChargeExploitationDto, @Req() request : Request) {
        return this.typeChargeExploitationService.delete(typeChargeExploitationId); 
    }

    @ApiBearerAuth()
    @UseGuards(AuthGuard('jwt'))
    @Put("update/:id")
    update(
        @Param("id", ParseIntPipe) typeChargeExploitationId : number,
        @Body() updateTypeChargeExploitationDto: UpdateTypeChargeExploitationDto,
        ) {
        return this.typeChargeExploitationService.update(typeChargeExploitationId, updateTypeChargeExploitationDto); 
    }
   
    
    
}


