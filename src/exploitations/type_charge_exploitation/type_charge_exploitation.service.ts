import { ForbiddenException, Injectable, NotFoundException } from '@nestjs/common';
import { PrismaService } from 'src/prisma/prisma.service';
import { CreateTypeChargeExploitationDto } from './dto/createTypeChargeExploitation.dto';
import { UpdateTypeChargeExploitationDto } from './dto/updateTypeChargeExploitation.dto';

@Injectable()
export class TypeChargeExploitationService {
    constructor(private readonly prismaService : PrismaService) {}

    async getAll() {
        return this.prismaService.typeChargeExploitation.findMany();
    }

    async getOne(typeChargeExploitationId: number) {
        const typeChargeExploitation = await this.prismaService.typeChargeExploitation.findUnique({where: {id: typeChargeExploitationId}});
        if(!typeChargeExploitation) throw new NotFoundException('Post not found');
        return typeChargeExploitation;
    }
    async create(createTypeChargeExploitationDto: CreateTypeChargeExploitationDto) {
        const { name, familleTypeChargeExploitationId} = createTypeChargeExploitationDto;
        await this.prismaService.typeChargeExploitation.create({data : { name, familleTypeChargeExploitationId}});
        return {data : "TypeChargeExploitation created"};
    }

    async update(typeChargeExploitationId: number, updateTypeChargeExploitationDto: UpdateTypeChargeExploitationDto) {
        const typeChargeExploitation = await this.prismaService.typeChargeExploitation.findUnique({where: {id: typeChargeExploitationId}});
        if(!typeChargeExploitation) throw new NotFoundException('TypeChargeExploitation not found');
        await this.prismaService.typeChargeExploitation.update({where: {id: typeChargeExploitationId}, data : {...updateTypeChargeExploitationDto}});
        return {data : "TypeChargeExploitation updeted!"};
    }

    async delete(typeChargeExploitationId: number) {
        const typeChargeExploitation = await this.prismaService.typeChargeExploitation.findUnique({where: {id: typeChargeExploitationId}});
        if(!typeChargeExploitation) throw new NotFoundException('Post not found');
        await this.prismaService.typeChargeExploitation.delete({where: {id: typeChargeExploitationId}});
        return {data : "TypeChargeExploitation deleted"};
    }
}

