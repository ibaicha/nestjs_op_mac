import { ForbiddenException, Injectable, NotFoundException } from '@nestjs/common';
import { PrismaService } from 'src/prisma/prisma.service';
import { CreateFamilleChargeExploitationDto } from './dto/createFamilleChargeExploitation.dto';
import { UpdateFamilleChargeExploitationDto } from './dto/updateFamilleChargeExploitation.dto';

@Injectable()
export class FamilleChargeExploitationService {
    constructor(private readonly prismaService : PrismaService) {}

    async getAll() {
        return this.prismaService.familleChargeExploitation.findMany();
    }

    async getOne(familleChargeExploitationId: number) {
        const familleChargeExploitation = await this.prismaService.familleChargeExploitation.findUnique({where: {id: familleChargeExploitationId}});
        if(!familleChargeExploitation) throw new NotFoundException('Post not found');
        return familleChargeExploitation;
    }
    async create(createFamilleChargeExploitationDto: CreateFamilleChargeExploitationDto) {
        const { name} = createFamilleChargeExploitationDto;
        await this.prismaService.familleChargeExploitation.create({data : { name}});
        return {data : "FamilleChargeExploitation created"};
    }

    async update(familleChargeExploitationId: number, updateFamilleChargeExploitationDto: UpdateFamilleChargeExploitationDto) {
        const familleChargeExploitation = await this.prismaService.familleChargeExploitation.findUnique({where: {id: familleChargeExploitationId}});
        if(!familleChargeExploitation) throw new NotFoundException('FamilleChargeExploitation not found');
        await this.prismaService.familleChargeExploitation.update({where: {id: familleChargeExploitationId}, data : {...updateFamilleChargeExploitationDto}});
        return {data : "FamilleChargeExploitation updeted!"};
    }

    async delete(familleChargeExploitationId: number) {
        const familleChargeExploitation = await this.prismaService.familleChargeExploitation.findUnique({where: {id: familleChargeExploitationId}});
        if(!familleChargeExploitation) throw new NotFoundException('Post not found');
        await this.prismaService.familleChargeExploitation.delete({where: {id: familleChargeExploitationId}});
        return {data : "FamilleChargeExploitation deleted"};
    }
}
