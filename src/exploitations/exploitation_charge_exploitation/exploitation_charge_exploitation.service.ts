
import {
  ForbiddenException,
  Injectable,
  NotFoundException,
} from '@nestjs/common';
import { PrismaService } from 'src/prisma/prisma.service';
import { CreateExploitationChargeExploitationDto } from './dto/createExploitationChargeExploitation.dto';
import { UpdateExploitationChargeExploitationDto } from './dto/updateExploitationChargeExploitation.dto';

@Injectable()
export class ExploitationChargeExploitationService {
  constructor(private readonly prismaService: PrismaService) {}

  async getAll() {
    return this.prismaService.exploitationChargeExploitation.findMany({
      select: {
        id: true,
        pu: true,
        quantite: true,
        valeur: true,
        unite: true,
        date: true,
        observation: true,
        createdAt: true,
        updatedAt: true,
        exploitation: {
          select: {
            id: true,
            compte: true,
            date: true,
            unite: true,
            //pu: true,
            surface: true,
            //production: true,
            createdAt: true,
            updatedAt: true,
          },
        },
        chargeExploitation:true,
      },
    });
  }

  async getAllCustom() {
    return this.prismaService.exploitationChargeExploitation.findMany({
      include: {
        exploitation: {
          include: {},
        },
        chargeExploitation: {
          include: {},
        },
      },
    });
  }
  async getOne(exploitationChargeExploitationId: number) {
    const exploitationChargeExploitation =
      await this.prismaService.exploitationChargeExploitation.findUnique({
        where: { id: exploitationChargeExploitationId },
      });
    if (!exploitationChargeExploitation)
      throw new NotFoundException('Post not found');
    return exploitationChargeExploitation;
  }
  async create(
    createExploitationChargeExploitationDto: CreateExploitationChargeExploitationDto,
  ) {
    const {
      pu,
      quantite,
      valeur,
      unite,
      date,
      observation,
      exploitationId,
      chargeExploitationId,
    } = createExploitationChargeExploitationDto;
    await this.prismaService.exploitationChargeExploitation.create({
      data: {
        pu,
        quantite,
        valeur,
        unite,
        date,
        observation,
        exploitationId,
        chargeExploitationId,
      },
    });
    return { data: 'ExploitationChargeExploitation created' };
  }

  async update(
    exploitationChargeExploitationId: number,
    updateExploitationChargeExploitationDto: UpdateExploitationChargeExploitationDto,
  ) {
    const exploitationChargeExploitation =
      await this.prismaService.exploitationChargeExploitation.findUnique({
        where: { id: exploitationChargeExploitationId },
      });
    if (!exploitationChargeExploitation)
      throw new NotFoundException('ExploitationChargeExploitation not found');
    await this.prismaService.exploitationChargeExploitation.update({
      where: { id: exploitationChargeExploitationId },
      data: { ...updateExploitationChargeExploitationDto },
    });
    return { data: 'ExploitationChargeExploitation updeted!' };
  }

  async delete(exploitationChargeExploitationId: number) {
    const exploitationChargeExploitation =
      await this.prismaService.exploitationChargeExploitation.findUnique({
        where: { id: exploitationChargeExploitationId },
      });
    if (!exploitationChargeExploitation)
      throw new NotFoundException('Post not found');
    await this.prismaService.exploitationChargeExploitation.delete({
      where: { id: exploitationChargeExploitationId },
    });
    return { data: 'ExploitationChargeExploitation deleted' };
  }

  async getByExploitationId(exploitationId: number) {
    return this.prismaService.exploitationChargeExploitation.findMany({
      select: {
        id: true,
        pu: true,
        quantite: true,
        valeur: true,
        unite: true,
        date: true,
        observation: true,
        exploitation: {
          select: {
            id: true,
            compte: true,
            date: true,
            unite: true,
            //pu: true,
            surface: true,
            //production: true,
          },
        },
        chargeExploitation: {
          include: {},
        },
      },

      where: { exploitationId: exploitationId },
    });
  }
}
