import {
  Body,
  Controller,
  Delete,
  Get,
  Param,
  ParseIntPipe,
  Post,
  Put,
  Req,
} from '@nestjs/common';
import { UseGuards } from '@nestjs/common/decorators/core/use-guards.decorator';
import { ChargeExploitationService } from './charge_exploitation.service';
import { AuthGuard } from '@nestjs/passport';
import { CreateChargeExploitationDto, UpdateChargeExploitationDto } from './dto/chargeExploitation.dto';
import { Request } from 'express';
import { ApiBearerAuth, ApiTags } from '@nestjs/swagger';

@ApiTags('ChargeExploitations')
@Controller('chargeExploitations')
export class ChargeExploitationController {
  constructor(
    private readonly chargeExploitationService: ChargeExploitationService,
  ) {}

  @Get()
  getAll() {
    return this.chargeExploitationService.getAll();
  }

  @Get('/:id')
  get(
    @Param('id', ParseIntPipe) chargeExploitationId: number,
    createChargeExploitationDto: CreateChargeExploitationDto,
  ) {
    return this.chargeExploitationService.getOne(chargeExploitationId);
  }

  @ApiBearerAuth()
  @UseGuards(AuthGuard('jwt'))
  @Post('create')
  create(@Body() createChargeExploitationDto: CreateChargeExploitationDto) {
    return this.chargeExploitationService.create(createChargeExploitationDto);
  }

  @ApiBearerAuth()
  @UseGuards(AuthGuard('jwt'))
  @Delete('delete/:id')
  delete(
    @Param('id', ParseIntPipe) chargeExploitationId: number,
    createChargeExploitationDto: CreateChargeExploitationDto,
    @Req() request: Request,
  ) {
    return this.chargeExploitationService.delete(chargeExploitationId);
  }

  @ApiBearerAuth()
  @UseGuards(AuthGuard('jwt'))
  @Put('update/:id')
  update(
    @Param('id', ParseIntPipe) chargeExploitationId: number,
    @Body() updateChargeExploitationDto: UpdateChargeExploitationDto,
  ) {
    return this.chargeExploitationService.update(
      chargeExploitationId,
      updateChargeExploitationDto,
    );
  }
}
