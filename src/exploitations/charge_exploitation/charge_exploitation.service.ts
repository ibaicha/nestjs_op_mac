import {
  ForbiddenException,
  Injectable,
  NotFoundException,
} from '@nestjs/common';
import { PrismaService } from 'src/prisma/prisma.service';
import { CreateChargeExploitationDto, UpdateChargeExploitationDto } from './dto/chargeExploitation.dto';

@Injectable()
export class ChargeExploitationService {
  constructor(private readonly prismaService: PrismaService) {}

  async getAllOk() {
    return this.prismaService.chargeExploitation.findMany({
      select: {
        id: true,
        name: true,
        unite: true,
        pu: true,
        quantite_unite_superficie: true,
        isAchat: true,
        uniteGrandeur: {
          select: {
            id: true,
            name: true,
          },
        },

        typeChargeExploitation: {
          select: {
            id: true,
            name: true,
          },
        },
        familleChargeExploitation: {
          select: {
            id: true,
            name: true,
          },
        },
      },
    });
  }

  async getAll() {
    return this.prismaService.chargeExploitation.findMany({
      include: {
        uniteGrandeur: {
          include: {
            surUniteGrandeurs: true,
          },
        },
        typeChargeExploitation: {
          include: {},
        },
        familleChargeExploitation: {
          include: {},
        },
      
      },
    });
  }

  async getOne(chargeExploitationId: number) {
    const chargeExploitation =
      await this.prismaService.chargeExploitation.findUnique({
        where: { id: chargeExploitationId },
      });
    if (!chargeExploitation) throw new NotFoundException('Post not found');
    return chargeExploitation;
  }
  async create(createChargeExploitationDto: CreateChargeExploitationDto) {
    const {
      name,
      unite,
      pu,
      quantite_unite_superficie,
      isAchat,
      isProduit,
      isIntrant,
      uniteGrandeurId,
      typeChargeExploitationId,
      familleChargeExploitationId,
    } = createChargeExploitationDto;
    await this.prismaService.chargeExploitation.create({
      data: {
        name,
        unite,
        pu,
        quantite_unite_superficie,
        isAchat,
        isProduit,
        isIntrant,
        uniteGrandeurId,
        typeChargeExploitationId,
        familleChargeExploitationId,
      },
    });
    return { data: 'ChargeExploitation created' };
  }

  async update(
    chargeExploitationId: number,
    updateChargeExploitationDto: UpdateChargeExploitationDto,
  ) {
    const chargeExploitation =
      await this.prismaService.chargeExploitation.findUnique({
        where: { id: chargeExploitationId },
      });
    if (!chargeExploitation)
      throw new NotFoundException('ChargeExploitation not found');
    await this.prismaService.chargeExploitation.update({
      where: { id: chargeExploitationId },
      data: { ...updateChargeExploitationDto },
    });
    return { data: 'ChargeExploitation updeted!' };
  }

  async delete(chargeExploitationId: number) {
    const chargeExploitation =
      await this.prismaService.chargeExploitation.findUnique({
        where: { id: chargeExploitationId },
      });
    if (!chargeExploitation) throw new NotFoundException('Post not found');
    await this.prismaService.chargeExploitation.delete({
      where: { id: chargeExploitationId },
    });
    return { data: 'ChargeExploitation deleted' };
  }
}
