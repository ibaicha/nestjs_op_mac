import { Body, Controller, Delete, Get, Param, ParseIntPipe, Post, Put, Req} from '@nestjs/common';
import { UseGuards } from '@nestjs/common/decorators/core/use-guards.decorator';
import { RecolteService } from './recolte.service';
import { AuthGuard } from '@nestjs/passport';
import { CreateRecolteDto } from './dto/createRecolte.dto';
import { UpdateRecolteDto } from './dto/updateRecolte.dto';
import { Request } from 'express';
import { ApiBearerAuth, ApiTags } from '@nestjs/swagger';


@ApiTags('Recolte')
@Controller('recoltes')
export class RecolteController {
    constructor(private readonly recolteService: RecolteService) {}

    @Get()
    getAll() {
        return this.recolteService.getAll();
    }

    @Get("/:id")
    get(@Param("id", ParseIntPipe) recolteId : number, createRecolteDto: CreateRecolteDto) {
        return this.recolteService.getOne(recolteId); 
    }

    @Get("exploitationIdx/:id")
    getByExploitation(@Param("id", ParseIntPipe) exploitationId : number, createRecolteDto: CreateRecolteDto) {
        return this.recolteService.getByExploitation(exploitationId); 
    }

    @Get("/exploitationId/:id")
    getAllRecoltesFromExploitation(@Param("id", ParseIntPipe) exploitationId : number) {
        return this.recolteService.getAllRecoltesFromExploitation(exploitationId);
    }
   

    @ApiBearerAuth()
    @UseGuards(AuthGuard('jwt'))
    @Post("create")
    create(@Body() createRecolteDto: CreateRecolteDto) {
        return this.recolteService.create(createRecolteDto);
        
    }


    @ApiBearerAuth()
    @UseGuards(AuthGuard('jwt'))
    @Delete("delete/:id")
    delete(@Param("id", ParseIntPipe) recolteId : number, createRecolteDto: CreateRecolteDto, @Req() request : Request) {
        return this.recolteService.delete(recolteId); 
    }

    @ApiBearerAuth()
    @UseGuards(AuthGuard('jwt'))
    @Put("update/:id")
    update(
        @Param("id", ParseIntPipe) recolteId : number,
        @Body() updateRecolteDto: UpdateRecolteDto,
        ) {
        return this.recolteService.update(recolteId, updateRecolteDto); 
    }
   
    
    
}

