import {
  ForbiddenException,
  Injectable,
  NotFoundException,
} from '@nestjs/common';
import { PrismaService } from 'src/prisma/prisma.service';

import { GetCreditParamsDTO, ICredit } from 'src/credits/credit/dto/credit.dto';
import { applyFilters } from 'src/utils/filters';
import { Prisma } from '@prisma/client';
import {
  CreateExploitationDto,
  UpdateExploitationDto,
} from './dto/exploitation.dto';

@Injectable()
export class ExploitationService {
  constructor(private readonly prismaService: PrismaService) {}

  async getAll() {
    return this.prismaService.exploitation.findMany({
      select: {
        id: true,
        compte: true,
        date: true,
        unite: true,
        //pu: true,
        surface: true,
        //production: true,
        createdAt: true,
        updatedAt: true,
        variete: {
          select: {
            id: true,
            name: true,
            surface_unite: true,
            quantite_unite: true,
            rendement_unite: true,
            isActive: true,
            produit: {
              select: {
                id: true,
                name: true,
              },
            },
          },
        },
        agence: {
          select: {
            id: true,
            name: true,
            sigle: true,
          },
        },
        annee: {
          select: {
            id: true,
            name: true,
            valeur: true,
          },
        },
        saison: {
          select: {
            id: true,
            name: true,
            description: true,
          },
        },

        producteur: {
          select: {
            id: true,
            compte: true,
            prenom: true,
            nom: true,
            cni: true,
            email: true,
            telephone: true,
            adresse: true,
            isActive: true,
          },
        },
        op: {
          select: {
            id: true,
            name: true,
            sigle: true,
            email: true,
            telephone: true,
            adresse: true,
            prenom_contact: true,
            nom_contact: true,
            email_contact: true,
            telephone_contact: true,
          },
        },
      },
    });
  }

  formatMontant(montant: number) {
    return montant.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ' ') + ' FCFA';
  }

  async getAllCreditsWithFilters(
    params: GetCreditParamsDTO,
  ): Promise<ICredit[]> {
    try {
      const { whereBuilder } =
        await applyFilters<Prisma.ExploitationsViewWhereInput>({
          appliedFiltersInput: params,
          availableFilters: {
            agenceId: async ({ filter }) => {
              return {
                where: {
                  agenceId: {
                    in: (filter as string).split(',').map(Number),
                  },
                },
              };
            },

            societeId: async ({ filter }) => {
              return {
                where: {
                  societeId: {
                    equals: Number(filter),
                  },
                },
              };
            },

            saisonId: async ({ filter }) => {
              return {
                where: {
                  saisonId: {
                    in: (filter as string).split(',').map(Number),
                  },
                },
              };
            },
            anneeId: async ({ filter }) => {
              return {
                where: {
                  anneeId: {
                    in: (filter as string).split(',').map(Number),
                  },
                },
              };
            },
            opId: async ({ filter }) => {
              return {
                where: {
                  opId: {
                    in: (filter as string).split(',').map(Number),
                  },
                },
              };
            },
          },
        });

      const creditWithFilters =
        await this.prismaService.exploitationsView.findMany({
          where: whereBuilder,
        });

      const credits: ICredit[] = [];

      for (const myCredit of creditWithFilters) {
        const dateObjectCredit = new Date(myCredit.date);
        const formattedDateCredit =
          dateObjectCredit.toLocaleDateString('fr-FR');

        const dateObjectDateExploitation = new Date(myCredit.date);
        const formattedDateExploitation =
          dateObjectDateExploitation.toLocaleDateString('fr-FR');

        const allCredit = this.prismaService.credit.findFirst({
          where: { exploitationId: myCredit.id },
        });
        const exigible =
          (await allCredit).capital +
          (await allCredit).interet +
          (await allCredit).moratoire +
          (await allCredit).autres_engagements;

        const allRemboursements = this.prismaService.remboursement.findMany({
          where: { exploitationId: myCredit.id },
        });

        const mesRemboursementsCount = (await allRemboursements).length;
        const mesRemboursementsTotaux = (await allRemboursements).reduce(
          (sum, remboursement) => sum + remboursement.valeur,
          0,
        );
        let monTauxRemboursement = 0;
        if (exigible > 0) {
          monTauxRemboursement = (mesRemboursementsTotaux / exigible) * 100;
        }

        const allRemboursementsMouvements =
          this.prismaService.mouvementStock.findMany({
            where: {
              opId: myCredit.opId,
              anneeId: myCredit.anneeId,
              saisonId: myCredit.saisonId,
              varieteId: myCredit.varieteId,
            },
          });
        const mesRemboursementsMouvementsCount = (
          await allRemboursementsMouvements
        ).length;
        const mesRemboursementsMouvementsTotaux = (
          await allRemboursementsMouvements
        ).reduce((sum, mouvement) => sum + mouvement.valeur, 0);

        let monTauxRemboursementMouvement = 0;
        if (exigible > 0) {
          monTauxRemboursementMouvement =
            (mesRemboursementsMouvementsTotaux / exigible) * 100;
        }

        credits.push({
          id: myCredit.id,

          dateCredit: formattedDateCredit,

          capital: (await allCredit).capital,
          interet: (await allCredit).interet,
          moratoire: (await allCredit).moratoire,
          autres_engagements: (await allCredit).autres_engagements,

          exigible: exigible,
          interetFormat: '',
          moratoireFormat: '',
          capitalFormat: '',
          autres_engagementsFormat: '',
          exigibleFormat: '',

          agenceId: myCredit.agenceId,
          agenceName: myCredit.agenceName,
          agenceSigle: myCredit.agenceSigle,

          societeId: myCredit.societeId,
          societeName: myCredit.societeName,
          societeSigle: myCredit.societeSigle,

          exploitationId: myCredit.id,
          exploitationOpId: myCredit.opId,
          exploitationOpName: myCredit.opName,

          exploitationOpPointId: myCredit.pointId,
          exploitationOpPointName: myCredit.pointAgenceName,

          exploitationOpPointAgenceId: myCredit.pointAgenceId,
          exploitationOpPointAgenceName: myCredit.pointAgenceName,
          exploitationOpPointAgenceSigle: myCredit.pointAgenceSigle,

          exploitationOpPointAgenceSocieteId: myCredit.pointAgenceSocieteId,
          exploitationOpPointAgenceSocieteName: myCredit.pointAgenceSocieteName,
          exploitationOpPointAgenceSocieteSigle:
            myCredit.pointAgenceSocieteSigle,

          exploitationTypeOpId: myCredit.typeOpId,
          exploitationTypeOpName: myCredit.typeOpName,

          exploitationAnneeId: myCredit.anneeId,
          exploitationAnneeName: myCredit.anneeName,
          exploitationSaisonId: myCredit.saisonId,
          exploitationSaisonName: myCredit.saisonName,

          exploitationVarieteId: myCredit.varieteId,
          exploitationVarieteName: myCredit.varieteName,

          exploitationProduitId: myCredit.produitId,
          exploitationProduitName: myCredit.produitName,

          exploitationFiliereId: myCredit.filiereId,
          exploitationFiliereName: myCredit.filiereName,

          exploitationFamilleEmplacemenId: myCredit.familleId,
          exploitationFamilleEmplacementName: myCredit.familleName,

          exploitationCompte: myCredit.compte,
          exploitationDate: formattedDateExploitation,
          exploitationUnite: myCredit.unite,
          exploitationSurface: myCredit.surface,

          remboursementsSum: mesRemboursementsTotaux,
          remboursementsSumFormat: this.formatMontant(mesRemboursementsTotaux),
          remboursementsCount: mesRemboursementsCount,
          tauxRemboursement: monTauxRemboursement,
          tauxRemboursementFormat: monTauxRemboursement.toFixed(2) + ' %',

          remboursementsMouvementSum: mesRemboursementsMouvementsTotaux,
          remboursementsMouvementCount: mesRemboursementsMouvementsCount,
          remboursementsMouvementSumFormat: this.formatMontant(
            mesRemboursementsMouvementsTotaux,
          ),
          tauxRemboursementMouvement: monTauxRemboursementMouvement,
          tauxRemboursementMouvementFormat:
            monTauxRemboursementMouvement.toFixed(2) + ' %',
        });
      }

      return credits;
    } catch (error) {
      throw new ForbiddenException(error);
    } finally {
      await this.prismaService.$disconnect();
    }
  }

  async getAllCustom() {
    return this.prismaService.exploitation.findMany({
      select: {
        id: true,
        compte: true,
        date: true,
        unite: true,
        surface: true,
        // createdAt: true,
        // updatedAt:true,
        variete: {
          include: {
            produit: {
              include: {},
            },
          },
        },
        annee: {
          include: {},
        },
        saison: {
          include: {},
        },
        producteur: {
          include: {},
        },
        op: {
          include: {},
        },
        remboursements: {
          include: {
            emballage: {
              include: {
                typeEmballage: {
                  include: {},
                },
                uniteGrandeur: {
                  include: {},
                },
              },
            },
            point: {
              include: {
                localite: {
                  include: {},
                },
              },
            },
          },
        },
        recoltes: {
          include: {
            emballage: {
              include: {
                typeEmballage: {
                  include: {},
                },
                uniteGrandeur: {
                  include: {},
                },
              },
            },
          },
        },

        exploitationChargeExploitations: {
          include: {},
        },

        credits: {
          include: {},
        },
      },
    });
  }

  async getOne(exploitationId: number) {
    return this.prismaService.exploitation.findMany({
      select: {
        id: true,
        compte: true,
        date: true,
        unite: true,
        surface: true,
        // createdAt: true,
        // updatedAt:true,
        variete: {
          include: {},
        },
        annee: {
          include: {},
        },
        saison: {
          include: {},
        },
        producteur: {
          include: {},
        },
        op: {
          include: {},
        },
        remboursements: {
          include: {},
        },
        /*
                    recoltes:{
                        include: {}
                    },
                    
                    exploitationChargeExploitations:{
                        include:{}
                    },
                    */
        credits: {
          include: {},
        },
      },
      where: { id: exploitationId },
    });
  }

  async create(createExploitationDto: CreateExploitationDto) {
    const {
      compte,
      date,
      unite,
      surface,
      agenceId,
      varieteId,
      anneeId,
      saisonId,
      producteurId,
      opId,
    } = createExploitationDto;
    await this.prismaService.exploitation.create({
      data: {
        compte,
        date,
        unite,
        surface,
        agenceId,
        varieteId,
        anneeId,
        saisonId,
        producteurId,
        opId,
      },
    });
    return { data: 'Exploitation created' };
  }

  async update(
    exploitationId: number,
    updateExploitationDto: UpdateExploitationDto,
  ) {
    const exploitation = await this.prismaService.exploitation.findUnique({
      where: { id: exploitationId },
    });
    if (!exploitation) throw new NotFoundException('Exploitation not found');
    await this.prismaService.exploitation.update({
      where: { id: exploitationId },
      data: { ...updateExploitationDto },
    });
    return { data: 'Exploitation updeted!' };
  }

  async delete(exploitationId: number) {
    const exploitation = await this.prismaService.exploitation.findUnique({
      where: { id: exploitationId },
    });
    if (!exploitation) throw new NotFoundException('Post not found');
    await this.prismaService.exploitation.delete({
      where: { id: exploitationId },
    });
    return { data: 'Exploitation deleted' };
  }
}
